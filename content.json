[{"title":"Activiti","date":"2017-05-25T09:20:45.000Z","path":"2017/05/25/Activiti/","text":"工作流（Workflow)就是业务过程的部分或整体在计算机应用环境下的自动化主要解决的是“使在多个参与者之间按照某种定义的规则传递文档，信息或任务的过程自动进行，从而实现某个预期的业务目标，或者促使此目标的实现” 工作流管理系统（WFMS）是一个软件系统，它完成工作量的定义和管理，并按照在系统中预先定义好的工作流规则进行工作流实例的执行。工作流管理系统不是企业的业务系统，而是为企业的业务系统的运行提供了一个软件的支撑环境 工作流管理系统的目标管理工作的流程以确保工作在正确的时间被期望的人员所执行——在自动化进行的业务过程中插入人工的执行和干预 Activiti介绍Activiti5是由Alfresco软件在2010年5月17日发布的业务流程管理（BPM）框架，它是覆盖了业务流程管理、工作流、服务协作等领域的一个开源的、灵活的、易扩展的可执行流程语言框架。Activiti基于Apache许可的开源BPM平台，创始人Tom Baeyens是JBoss jBPM的项目架构师，它特色是提供了eclipse插件，开发人员可以通过插件直接绘画出业务 工作流引擎ProcessEngine对象，这是Activiti工作的核心。负责生成流程运行时的各种实例及数据、监控和管理流程的运行。 BPMN业务流程建模与标注（Business Process Model and Notation，BPMN) ，描述流程的基本符号，包括这些图元如何组合成一个业务流程图（Business Process Diagram） 核心配置文件&apos; activiti.cfg.xml &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&quot;&gt; &lt;!-- ProcessEngineConfiguration processEngineConfiguration = ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration(); //连接数据库的配置 processEngineConfiguration.setJdbcDriver(&quot;com.mysql.jdbc.Driver&quot;); processEngineConfiguration.setJdbcUrl(&quot;jdbc:mysql://localhost:3306/itcast0711activiti?useUnicode=true&amp;characterEncoding=utf8&quot;); processEngineConfiguration.setJdbcUsername(&quot;root&quot;); processEngineConfiguration.setJdbcPassword(&quot;root&quot;); /** public static final String DB_SCHEMA_UPDATE_FALSE = &quot;false&quot;;不能自动创建表，需要表存在 public static final String DB_SCHEMA_UPDATE_CREATE_DROP = &quot;create-drop&quot;;先删除表再创建表 public static final String DB_SCHEMA_UPDATE_TRUE = &quot;true&quot;;如果表不存在，自动创建表 */ processEngineConfiguration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE); --&gt; &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt; &lt;!-- 连接数据的配置 --&gt; &lt;property name=&quot;jdbcDriver&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt; &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/itcast0711activiti?useUnicode=true&amp;amp;characterEncoding=utf8&quot;&gt;&lt;/property&gt; &lt;property name=&quot;jdbcUsername&quot; value=&quot;root&quot;&gt;&lt;/property&gt; &lt;property name=&quot;jdbcPassword&quot; value=&quot;root&quot;&gt;&lt;/property&gt; &lt;!-- 没有表创建表 --&gt; &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;/beans&gt; &apos; 看到这里不得不感叹一下spring的强大，整合了java半壁江山 数据库初始化数据库方法一： //创建工作流需要的数据库 @Test public void createTable(){ ProcessEngineConfiguration configuration = ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration(); configuration.setJdbcDriver(&quot;com.mysql.jdbc.Driver&quot;); configuration.setJdbcUrl(&quot;jdbc:mysql://localhost:3306/activiti&quot;); configuration.setJdbcUsername(&quot;root&quot;); configuration.setJdbcPassword(&quot;12345678&quot;); /** public static final String DB_SCHEMA_UPDATE_FALSE = &quot;false&quot;;不能自动创建表，需要表存在 public static final String DB_SCHEMA_UPDATE_CREATE_DROP = &quot;create-drop&quot;;先删除表再创建表 public static final String DB_SCHEMA_UPDATE_TRUE = &quot;true&quot;;如果表不存在，自动创建表 */ configuration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE); //工作流的核心对象，ProcessEnginee对象 ProcessEngine processEngine = configuration.buildProcessEngine(); System.out.println(&quot;processEngine:&quot;+processEngine); } 方法二： 由于方法一要有代码比较麻烦，所以有配置文件替代：activiti.cfg.xml &lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd&quot;&gt; &lt;!-- ProcessEngineConfiguration processEngineConfiguration = ProcessEngineConfiguration.createStandaloneProcessEngineConfiguration(); //连接数据库的配置 processEngineConfiguration.setJdbcDriver(&quot;com.mysql.jdbc.Driver&quot;); processEngineConfiguration.setJdbcUrl(&quot;jdbc:mysql://localhost:3306/itcast0711activiti?useUnicode=true&amp;characterEncoding=utf8&quot;); processEngineConfiguration.setJdbcUsername(&quot;root&quot;); processEngineConfiguration.setJdbcPassword(&quot;root&quot;); /** public static final String DB_SCHEMA_UPDATE_FALSE = &quot;false&quot;;不能自动创建表，需要表存在 public static final String DB_SCHEMA_UPDATE_CREATE_DROP = &quot;create-drop&quot;;先删除表再创建表 public static final String DB_SCHEMA_UPDATE_TRUE = &quot;true&quot;;如果表不存在，自动创建表 */ processEngineConfiguration.setDatabaseSchemaUpdate(ProcessEngineConfiguration.DB_SCHEMA_UPDATE_TRUE); --&gt; &lt;bean id=&quot;processEngineConfiguration&quot; class=&quot;org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration&quot;&gt; &lt;!-- 连接数据的配置 --&gt; &lt;property name=&quot;jdbcDriver&quot; value=&quot;com.mysql.jdbc.Driver&quot;&gt;&lt;/property&gt; &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql://localhost:3306/itcast0711activiti?useUnicode=true&amp;amp;characterEncoding=utf8&quot;&gt;&lt;/property&gt; &lt;property name=&quot;jdbcUsername&quot; value=&quot;root&quot;&gt;&lt;/property&gt; &lt;property name=&quot;jdbcPassword&quot; value=&quot;12345678&quot;&gt;&lt;/property&gt; &lt;!-- 没有表创建表 --&gt; &lt;property name=&quot;databaseSchemaUpdate&quot; value=&quot;true&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;/beans&gt; /**使用配置文件创建工作流需要的23张表*/ @Test public void createTable_2(){ // ProcessEngineConfiguration processEngineConfiguration = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(&quot;activiti.cfg.xml&quot;); // //工作流的核心对象，ProcessEnginee对象 // ProcessEngine processEngine = processEngineConfiguration.buildProcessEngine(); ProcessEngine processEngine = ProcessEngineConfiguration.createProcessEngineConfigurationFromResource(&quot;activiti.cfg.xml&quot;) // .buildProcessEngine(); System.out.println(&quot;processEngine:&quot;+processEngine); } Activiti用来存放流程数据一共使用了23张表 都是以Act_开头的 底层操作使用的mybatis操作 工作流Activiti的表是用来存储流程数据的 而业务数据都需要用户自己创建和维护 一定要让业务去关联流程 才能关联工作流系统 API流程引擎ProcessEngine对象在Activiti中最核心的类，其他的类都是由他而来。 由流程引擎ProcessEngine对象创建各个Service,这些Service是调用工作流23张表的服务 RepositoryService 管理流程定义RuntimeService 执行管理，包括启动，推进，删除流程实例等操作TaskService 任务管理HistoryService 历史管理（执行完的数据的管理）IdentityService 组织机构管理FormService 一个可选服务，任务表单管理ManagerService 流程的执行过程 ProcessEngine processEngine = ProcessEngines.getDefaultProcessEngine(); /**部署流程定义*/ @Test public void deploymentProcessDefinition(){ Deployment deployment = processEngine.getRepositoryService()//与流程定义和部署对象相关的Service .createDeployment()//创建一个部署对象 .name(&quot;helloworld入门程序&quot;)//添加部署的名称 .addClasspathResource(&quot;diagrams/helloworld.bpmn&quot;)//从classpath的资源中加载，一次只能加载一个文件 .addClasspathResource(&quot;diagrams/helloworld.png&quot;)//从classpath的资源中加载，一次只能加载一个文件 .deploy();//完成部署 System.out.println(&quot;部署ID：&quot;+deployment.getId());//1 System.out.println(&quot;部署名称：&quot;+deployment.getName());//helloworld入门程序 } /**启动流程实例*/ @Test public void startProcessInstance(){ //流程定义的key String processDefinitionKey = &quot;helloword&quot;; ProcessInstance pi = processEngine.getRuntimeService()//与正在执行的流程实例和执行对象相关的Service .startProcessInstanceByKey(processDefinitionKey);//使用流程定义的key启动流程实例，key对应helloworld.bpmn文件中id的属性值，使用key值启动，默认是按照最新版本的流程定义启动 System.out.println(&quot;流程实例ID:&quot;+pi.getId());//流程实例ID 101 System.out.println(&quot;流程定义ID:&quot;+pi.getProcessDefinitionId());//流程定义ID helloworld:1:4 } /**查询当前人的个人任务*/ @Test public void findMyPersonalTask(){ String assignee = &quot;张三&quot;; List&lt;Task&gt; list = processEngine.getTaskService()//与正在执行的任务管理相关的Service .createTaskQuery()//创建任务查询对象 .taskAssignee(assignee)//指定个人任务查询，指定办理人 .list(); if(list!=null &amp;&amp; list.size()&gt;0){ for(Task task:list){ System.out.println(&quot;任务ID:&quot;+task.getId()); System.out.println(&quot;任务名称:&quot;+task.getName()); System.out.println(&quot;任务的创建时间:&quot;+task.getCreateTime()); System.out.println(&quot;任务的办理人:&quot;+task.getAssignee()); System.out.println(&quot;流程实例ID：&quot;+task.getProcessInstanceId()); System.out.println(&quot;执行对象ID:&quot;+task.getExecutionId()); System.out.println(&quot;流程定义ID:&quot;+task.getProcessDefinitionId()); System.out.println(&quot;########################################################&quot;); } } } /**完成我的任务*/ @Test public void completeMyPersonalTask(){ //任务ID String taskId = &quot;204&quot;; processEngine.getTaskService()//与正在执行的任务管理相关的Service .complete(taskId); System.out.println(&quot;完成任务：任务ID：&quot;+taskId); }","tags":[{"name":"activiti工作流","slug":"activiti工作流","permalink":"https:fengjisen.github.io/tags/activiti工作流/"}]},{"title":"青春","date":"2017-03-24T15:15:03.000Z","path":"2017/03/24/青春/","text":"18岁的时候，你觉得自己还能永远停留在这个阶段，还在惋惜青春，感叹没有做几件疯狂的事情；19岁的时候，开始学会观察这个世界，有着自己的小情绪，棱角分明，敏感而脆弱；20岁的时候，你想成为一个温和平静的人，修炼自己的心性，写下了“你已亭亭，无惧风雨”的期许；21岁的开始，你想成为一个内心强大的人，坚持自己喜欢的生活方式，距离梦想越来越近。 “我们都到了一个略显尴尬的年纪，都不再那么年轻了却也没有足够的成长；都想依靠自己却发现还差一点； 都想要往前走却发现前路漫漫，前有迷雾后有压力。但我依旧相信一些事物，我想你也同样。 有野心就去努力，在你跌倒还能站起来的时候。越是尴尬越是要面对，才能摆脱它。”","tags":[{"name":"记事","slug":"记事","permalink":"https:fengjisen.github.io/tags/记事/"}]}]